---

- name: Provision
  hosts: all
  tasks:

    - name: Update apt cache if the last one is more than 3600 seconds ago
      apt:
        update_cache: yes
        cache_valid_time: 3600
      become: true

    - name: Update all packages to the latest version
      apt:
        upgrade: dist
        force_apt_get: true
      become: true

    - name: Upgrade all packages to the latest version
      apt:
        name: "*"
        state: latest
        force_apt_get: true
      become: true

    - name: Add a new user 
      user:
        name: nimeshjm
        shell: /bin/bash
      vars:
        password: !vault |
          $ANSIBLE_VAULT;1.1;AES256
          36616638313865653637386466333239366362373635393332646465383963386235333666333161
          3564623935633765393136363864626361666362613732340a373363343265383465613062313230
          34613062613536666165653031326139306233343235343631356630393936386437616166623730
          3536646161383332650a656433393438666336396337356433633636333030633464323765663461
          3763
      become: true

    - name: Add user to sudoers
      copy:
        dest: "/etc/sudoers.d/nimeshjm"
        content: "nimeshjm  ALL=(ALL)  NOPASSWD: ALL"
      become: true

    - name: Authorise SSH Key
      authorized_key: 
        user: nimeshjm
        key: "{{ lookup('file', 'id_rsa.pub') }}"
        state: present
      become: true

    - name: Deploy SSH key
      copy:
        src: id_rsa
        dest: /home/nimeshjm/.ssh/
        owner: nimeshjm
        group: nimeshjm
        mode: 0400

    - name: Disable Password Authentication
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: '^PasswordAuthentication'
        line: "PasswordAuthentication no"
        state: present
        backup: yes
      become: true
        
    - name: Disable Root Login
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: '^PermitRootLogin'
        line: "PermitRootLogin no"
        state: present
        backup: yes
      become: true
      notify:
        - restart ssh

    - name: Create secondary storage
      become: true
      lvg:
        vg: BIGDISK
        pvs: /dev/vdb
    
    - name: Size secondary storage
      become: true
      lvol:
        vg: BIGDISK
        lv: "BIGDISK"
        size: 999G

    - name: Create file system
      become: true
      filesystem:
        fstype: ext4
        dev: /dev/BIGDISK/BIGDISK
    
    - name: Mount logical volume
      become: true
      mount:
        name: /mnt/storage
        src: /dev/BIGDISK/BIGDISK
        fstype: ext4
        state: mounted  
            
    - name: Install dependencies
      become: true
      apt:
        state: latest
        name: ['apt-transport-https', 'ca-certificates', 'curl', 'gnupg-agent', 'software-properties-common']

    - name: Add certbot apt repository
      become: true
      apt_repository: 
        repo: 'ppa:certbot/certbot' 
        state: present 
        filename: certbot
        update_cache: yes

    - name: Install certbot
      become: true
      apt:
        state: latest
        name: ['certbot', 'python-certbot-nginx', 'software-properties-common', 'python3-certbot-dns-cloudflare']

    - name: Install docker
      become: true
      apt:
        state: latest
        name: ['docker-ce', 'docker-ce-cli', 'containerd.io']

    - name: Add docker apt-key
      become: true
      apt_key: 
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present 

    - name: Add docker apt repository
      become: true
      apt_repository: 
        repo: 'deb https://download.docker.com/linux/ubuntu xenial stable' 
        state: present 
        filename: docker
        update_cache: yes

    - name: Install docker
      become: true
      apt:
        state: latest
        name: ['docker-ce', 'docker-ce-cli', 'containerd.io']

    - name: Setup docker in secondary storage
      become: true
      copy:
        content: '{"data-root":"/mnt/storage/docker"}'
        dest: /etc/docker/daemon.json
      notify:
        - restart docker
    
    - name: Add users to docker group
      user:
        name: "nimeshjm"
        append: yes
        groups: docker
      become: true
        
    - name: Install docker compose
      become: true*
      get_url:
        url: https://github.com/docker/compose/releases/download/1.24.1/docker-compose-Linux-x86_64
        dest: /usr/local/bin/docker-compose
        mode: '0777'
        checksum: sha256:cfb3439956216b1248308141f7193776fcf4b9c9b49cbbe2fb07885678e2bb8a

    - name: Add Ansible apt repository
      become: true
      apt_repository: 
        repo: 'ppa:ansible/ansible' 
        state: present 
        filename: ansible
        update_cache: yes

    - name: Install Ansible
      become: true
      apt:
        state: latest
        name: "ansible"

    - name: Install python docker and docker-compose modules
      pip:
        name: ['docker', 'docker-compose']
        
    - name: Install pihole
      docker_container:
        capabilities:
        - NET_ADMIN
        name: pi-hole
        dns_servers:
        - 127.0.0.1
        env:
          DNS1: 127.0.0.1#5053
          DNS2: ''
          DNSMASQ_LISTENING: local
          IPv6: "false"
          TZ: Europe/London
          ServerIp: 127.0.0.1
          WEBPASSWORD: admin
        ports:
          - 127.0.0.1:11080:80
          - 127.0.0.1:53:53/tcp
          - 127.0.0.1:53:53/udp
          - 127.0.0.1:67:67/udp
          - 127.0.0.1:11443:443
        image: pihole/pihole
        restart_policy: unless-stopped

    - name: Add Go apt repository
      become: true
      apt_repository: 
        repo: 'ppa:longsleep/golang-backports' 
        state: present 
        filename: golang
        update_cache: yes

    - name: Install Go
      become: true
      apt:
        state: latest
        name: "golang-go"

    - name: create temporary build directory for dt site
      tempfile:
        state: directory
        suffix: build
      register: tempdir_dt

    - name: clone dt site
      git:
        repo: ssh://git@bitbucket.org/nimeshjm/dt-gosite.git
        dest: "{{ tempdir_dt.path }}"

    - name: Untag dt image 
      docker_image:
        name: dt-site
        state: absent
        force_absent: yes

    - name: Build dt image 
      docker_image:
        name: dt-site
        build:
          path: "{{tempdir_dt.path}}"
          pull: no
        source: build

    - name: delete dt temp directory
      file:
        path: "{{ tempdir_dt.path }}"
        state: absent
      when: tempdir_dt.path is defined

    # run dt
    - name: run dt
      docker_container:
        name: dt-site
        ports:
          - 127.0.0.1:12080:80
        image: dt-site
        restart_policy: unless-stopped

    - name: create temporary build directory for nimeshjmsite
      tempfile:
        state: directory
        suffix: build
      register: tempdir_nimeshjm

    - name: clone nimeshjmsite
      git:
        repo: git@bitbucket.org:nimeshjm/nimeshjm-gosite.git
        dest: "{{ tempdir_nimeshjm.path }}"

    - name: Untag nimeshjmimage 
      docker_image:
        name: nimeshjm-site
        state: absent
        force_absent: yes

    - name: Build nimeshjmimage 
      docker_image:
        name: nimeshjm-site
        build:
          path: "{{tempdir_nimeshjm.path}}"
          pull: no
        source: build

    - name: delete nimeshjmtemp directory
      file:
        path: "{{ tempdir_nimeshjm.path }}"
        state: absent
      when: tempdir_nimeshjm.path is defined

    - name: run nimeshjm.com
      docker_container:
        name: nimesjm-site
        ports:
          - 127.0.0.1:13080:80
        image: nimeshjm-site
        restart_policy: unless-stopped


    - name: create temporary build directory for funds
      tempfile:
        state: directory
        suffix: build
      register: tempdir_funds

    - name: clone tempdir_funds
      git:
        repo: git@github.com:nimeshjm/fund-data.git
        dest: "{{ tempdir_funds.path }}"

    - name: Untag funds 
      docker_image:
        name: funds-site
        state: absent
        force_absent: yes

    - name: Build funds 
      docker_image:
        name: funds-site
        build:
          path: "{{tempdir_funds.path}}"
          pull: no
        source: build

    - name: delete funds directory
      file:
        path: "{{ tempdir_funds.path }}"
        state: absent
      when: tempdir_funds.path is defined

    - name: run funds
      docker_container:
        name: funds-site
        ports:
          - 127.0.0.1:14080:8000
        image: funds-site
        restart_policy: unless-stopped

    - name: copy nginx config
      become: true
      copy:
        src: "{{playbook_dir}}/files/sites-available/"
        dest: /etc/nginx/sites-available/
        owner: root
        group: root
        mode: '0644'

    - name: Create sites-enabled symlinks
      become: true
      file:
        src: "/etc/nginx/sites-available/{{item}}"
        dest: "/etc/nginx/sites-enabled/{{item}}"
        owner: root
        group: root
        state: link
      with_items:
        - nimeshjm.conf
        - owncloud.conf
        - funds.conf
        - dt.conf
      notify:
        - restart nginx

    - name: add certbot dns secret
      become: true
      copy:
        src: "{{playbook_dir}}/files/letsencrypt/cloudflare.ini"
        dest: /etc/letsencrypt/cloudflare.ini
        owner: root
        group: root
        mode: '0400'

    - name: Run LetsEncrypt certbot
      become: true
      command: certbot run -d cloud.nimeshjm.com,mail.digitaltechnologies.ltd.uk,digitaltechnologies.ltd.uk,www.digitaltechnologies.ltd.uk,nimeshjm.com,www.nimeshjm.com,funds.nimeshjm.com -n --expand --dns-cloudflare --dns-cloudflare-credentials /etc/letsencrypt/cloudflare.ini --installer nginx
  
    # ,mail.digitaltechnologies.ltd.uk
    # 
    #     
  
  handlers:
    - name: restart ssh
      become: true
      service:
        name=sshd
        state=restarted

    - name: restart docker
      become: true
      service:
        name=docker
        state=restarted

    - name: restart nginx
      become: true
      service:
        name=nginx
        state=restarted

          
